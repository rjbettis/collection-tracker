service: server

app: myapp
org: rjbettis

provider:
  name: aws
  runtime: nodejs10.x
  environment:
    GAME_TEST_TABLE: ${self:service}-games-test
    PLATFORM_TEST_TABLE: ${self:service}-platforms-test
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.GAME_TEST_TABLE}'
        - 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PLATFORM_TEST_TABLE}'

functions:
  search-tgdb:
    handler: searchGamesDb.endpoint
    events:
      - http:
          path: /search-tgdb
          method: GET
          cors: true
          integration: LAMBDA
          request:
            template:
              application/json: '{ "search" : "$input.params(''search'')", "platform" : "$input.params(''platform'')" }'
  add-game:
    handler: addGame.endpoint
    events:
      - http:
          path: /add-game
          method: GET
          cors: true
          integration: LAMBDA
          request:
            template:
              application/json: '{ "name" : "$input.params(''name'')", "cover" : "$input.params(''cover'')", "platform" : "$input.params(''platform'')", "completeness" : "$input.params(''completeness'')", "developer" : "$input.params(''developer'')" }'
  get-games:
    handler: getGames.endpoint
    events:
      - http:
          path: /get-games
          method: GET
          cors: true
          integration: LAMBDA
          request:
            template:
              application/json: '{ "platform" : "$input.params(''platform'')" }'
  add-platform:
    handler: addPlatform.endpoint
    events:
      - http:
          path: /add-platform
          method: GET
          cors: true
          integration: LAMBDA
          request:
            template:
              application/json: '{ "platform" : "$input.params(''platform'')" }'
  get-platform-tabs:
    handler: getPlatformTabs.endpoint
    events:
      - http:
          path: /get-platform-tabs
          method: GET
          cors: true
          integration: LAMBDA
  delete-game:
    handler: deleteGame.endpoint
    events:
      - http:
          path: /delete-game
          method: GET
          cors: true
          integration: LAMBDA
          request:
            template:
              application/json: '{ "id" : "$input.params(''id'')", "platform" : "$input.params(''platform'')" }'
  get-timeline:
    handler: getTimeline.endpoint
    events:
      - http:
          path: /get-timeline
          method: GET
          cors: true
          integration: LAMBDA

resources:
  Resources:
    GameTestTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: platform
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: platform
            KeyType: HASH
          - AttributeName: name
            KeyType: RANGE

        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.GAME_TEST_TABLE}

    PlatformTestTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PLATFORM_TEST_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: platform
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: platform
            KeyType: RANGE

        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: server

app: myapp
org: rjbettis

provider:
  name: aws
  runtime: nodejs10.x
  environment:
    GAME_TABLE: ${self:service}-games
    PLATFORM_TABLE: ${self:service}-platforms
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.GAME_TABLE}"
        - "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PLATFORM_TABLE}"

functions:
  search-igdb:
    handler: handler.endpoint
    events:
      - http:
          path: /search-igdb
          method: GET
          cors: true
          integration: LAMBDA
          request:
            template:
              application/json: '{ "search" : "$input.params(''search'')" }'
  add-game:
    handler: handler2.endpoint
    events:
      - http:
          path: /add-game
          method: GET
          cors: true
          integration: LAMBDA
          request:
            template:
              application/json: '{ "name" : "$input.params(''name'')", "cover" : "$input.params(''cover'')", "platform" : "$input.params(''platform'')" }'
  get-games:
    handler: handler3.endpoint
    events:
      - http:
          path: /get-games
          method: GET
          cors: true
          integration: LAMBDA
          request:
            template:
              application/json: '{ "platform" : "$input.params(''platform'')" }'
  add-platform:
    handler: handler4.endpoint
    events:
      - http:
          path: /add-platform
          method: GET
          cors: true
          integration: LAMBDA
          request:
            template:
              application/json: '{ "platform" : "$input.params(''platform'')" }'


resources:
  Resources:
    TodosDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          - 
            AttributeName: platform
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
          -
            AttributeName: platform
            KeyType: RANGE

        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.GAME_TABLE}

    PlatformTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.PLATFORM_TABLE}
        AttributeDefinitions:
          - 
            AttributeName: platform
            AttributeType: S
        KeySchema:
          -
            AttributeName: platform
            KeyType: HASH

        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5